# Nginx configuration for mcp.lanonasis.com
# Handles MCP server with SSE, WebSocket, and HTTP endpoints

server {
    listen 80;
    server_name mcp.lanonasis.com;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name mcp.lanonasis.com;
    
    # SSL certificates
    ssl_certificate /etc/letsencrypt/live/mcp.lanonasis.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/mcp.lanonasis.com/privkey.pem;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # CORS headers for API access
    add_header 'Access-Control-Allow-Origin' '$http_origin' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
    
    # Handle preflight requests
    if ($request_method = 'OPTIONS') {
        return 204;
    }
    
    # SSE (Server-Sent Events) endpoint
    location /sse {
        proxy_pass http://localhost:8080/sse;
        proxy_http_version 1.1;
        
        # SSE specific headers
        proxy_set_header Connection '';
        proxy_set_header Cache-Control 'no-cache';
        proxy_set_header Content-Type 'text/event-stream';
        proxy_set_header X-Accel-Buffering 'no';
        
        # Disable buffering for SSE
        proxy_buffering off;
        proxy_cache off;
        
        # Keep connection alive
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
        
        # Standard headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # WebSocket endpoint for MCP
    location /mcp {
        proxy_pass http://localhost:8080/mcp;
        proxy_http_version 1.1;
        
        # WebSocket headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Keep connection alive
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
        
        # Standard headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Authentication endpoints (v1/auth/*)
    location /v1/auth/ {
        # Proxy to main backend auth endpoints
        proxy_pass http://localhost:4000/auth/;
        proxy_http_version 1.1;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Pass auth headers
        proxy_set_header Authorization $http_authorization;
        proxy_pass_header Authorization;
        proxy_pass_header Set-Cookie;
        proxy_pass_header Cookie;
    }
    
    # MCP API endpoints (v1/*)
    location /v1/ {
        proxy_pass http://localhost:8080/v1/;
        proxy_http_version 1.1;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
    }
    
    # Health check
    location /health {
        proxy_pass http://localhost:8080/health;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
    }
    
    # Root endpoint
    location / {
        # Check if MCP server is running on 8080, otherwise fallback to 4000
        proxy_pass http://localhost:8080/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # If 8080 fails, try 4000
        proxy_next_upstream error timeout http_502 http_503 http_504;
        proxy_intercept_errors on;
        error_page 502 503 504 = @fallback;
    }
    
    # Fallback to main backend if MCP server is down
    location @fallback {
        proxy_pass http://localhost:4000/mcp/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Specific endpoint mappings based on your description
    location = /sse {
        proxy_pass http://localhost:8080/sse;
        proxy_set_header Connection '';
        proxy_set_header Cache-Control 'no-cache';
        proxy_set_header Content-Type 'text/event-stream';
        proxy_set_header X-Accel-Buffering 'no';
        proxy_buffering off;
    }
    
    # Allow both /mcp and /v1/mcp patterns
    location ~ ^/(v1/)?mcp$ {
        proxy_pass http://localhost:8080$request_uri;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
    }
}